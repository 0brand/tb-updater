#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## This script gets sourced by:
## - /usr/bin/whonixcheck
## - /usr/bin/torbrowser

tbbversion() {
   ## code shared between torbrowser and whonixcheck

   ## fallback
   tbb_recommended_versions_list="UNKNOWN"
   tbb_recommended_versions_error=""

   ## Sanity Tests.
   if ! command -v sed >/dev/null ; then
      local MSG="$SCRIPTNAME tbbversion: sed not found."
      echo "$MSG"
      error "$MSG"
      return 1
   fi
   if ! command -v grep >/dev/null ; then
      local MSG="$SCRIPTNAME tbbversion: grep not found."
      echo "$MSG"
      error "$MSG"
      return 1
   fi

   tbbversions_found="0"

   if [ ! -f "$RecommendedTBBVersions" ]; then
      local MSG="$SCRIPTNAME tbbversion: 1: $1 does not exist."
      echo "$MSG"
      error "$MSG"
      return 1
   fi

   local line_number
   line_number="0"
   local line
   while read -r -d $'\n' line; do
      line_number="$(( $line_number + 1 ))"

      ## Check if RecommendedTBBVersions versions file is excessively long.
      if [ "$line_number" -gt "100" ]; then
         tbb_recommended_versions_list="UNKNOWN"
         tbb_recommended_versions_error="Rejected invalid RecommendedTBBVersions versions file. (Longer than 100 lines.) \
Either check.torproject.org has been compromised or this is a Whonix bug."
         return 0
      fi

      if [ "$line" = "" ]; then
         continue
      fi

      if echo "$line" | grep -q -i -s "\[" ; then
         continue
      fi
      if echo "$line" | grep -q -i -s "\]" ; then
         continue
      fi

      if [ "$TB_VERSIONS_ALPHA" = "1" ]; then
         true
      else
         if echo "$line" | grep -q -i -s "\-alpha\-" ; then
            continue
         fi
      fi
      if [ "$TB_VERSIONS_BETA" = "1" ]; then
         true
      else
         if echo "$line" | grep -q -i -s "\-beta\-" ; then
            continue
         fi
      fi
      if [ "$TB_VERSIONS_RC" = "1" ]; then
         true
      else
         if echo "$line" | grep -q -i -s "\-rc\-" ; then
            continue
         fi
      fi
      if echo "$line" | grep -q -i -s "MacOS" ; then
         continue
      fi
      if echo "$line" | grep -q -i -s "Windows" ; then
         continue
      fi

      line="$(echo "$line" | sed 's/"//g')"
      line="$(echo "$line" | sed 's/,//g')"

      local temp
      temp="$line"

      ## new format:
      ## https://trac.torproject.org/projects/tor/ticket/8940#comment:28

      ## {{ parsing old format
      if echo "$line" | grep -q -i -s "Linux" ; then
         temp="$(echo "$temp" | sed 's/-i686//g')"
         temp="$(echo "$temp" | sed 's/-x86_64//g')"
         temp="$(echo "$temp" | sed 's/-Linux//g')"
      fi
      ## }} parsing old format

      tbbversions_found="$(( $tbbversions_found + 1 ))"

      if [ "$tbb_recommended_versions_list" = "UNKNOWN" ]; then
         ## No tbb versions has been found earlier. Still set to UNKNOWN.
         ## Therefore setting tbb_recommended_versions_list to $temp.
         tbb_recommended_versions_list="$temp"
      else
         ## Keep already found version and add newly found version.
         tbb_recommended_versions_list="$temp $tbb_recommended_versions_list"
      fi

      ## Not using break, because RecommendedTBBVersions often have
      ## multiple recommended versions. Latest on the bottom.
      ## For example:
      ##    "2.3.25-12-Linux",
      ##    "2.3.25-13-Linux",
   done < "$RecommendedTBBVersions"

   ## A single version string should not be longer than 20 characters. If
   ## it is, there is probably something wrong.
   local max_string_length
   max_string_length="20"

   ## In case we found multiple valid versions, the max_string_length must
   ## be multiplied with the number of valid versions we found.
   max_string_length="$(( $max_string_length * $tbbversions_found ))"

   local actual_string_length
   actual_string_length="${#tbb_recommended_versions_list}"
   tbbversion_excess_length=""

   ## Check if the string length of tbb_recommended_versions_list is excessive.
   if [ "$actual_string_length" -gt "$max_string_length" ]; then
      ## Store excess length for later use.
      tbbversion_excess_length="$tbb_recommended_versions_list"

      ## Shorten excess length $tbb_recommended_versions_list to $max_string_length chars.
      #tbb_recommended_versions_list="${tbb_recommended_versions_list:0:$max_string_length}"

      tbb_recommended_versions_list="UNKNOWN"

      tbb_recommended_versions_error="Excessive version string length. ($actual_string_length characters)
Either check.torproject.org has been compromised or this is a Whonix bug."

      return 0
   fi
}

tbbversion_installed() {
   ## Getting currently installed version number

   ## Fallbacks.
   tbb_locally_installed_version="UNKNOWN. Please report this Whonix Bug!"
   tbb_locally_installed_version_detect_success="0"

   if [ ! -d "$tbb_folder" ]; then
      tbb_locally_installed_version="None installed. (Folder <code>$tbb_folder</code> does not exist.)"
      return 0
   fi

   ## TODO
   tbb_locally_installed_version="Installed. (Folder <code>$tbb_folder</code> exists.) Locally installed Tor Browser version detection not implemented."
}
