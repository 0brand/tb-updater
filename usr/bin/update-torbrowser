#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

#set -x
set -o pipefail
set -o errtrace

SCRIPTNAME="$(basename "$BASH_SOURCE")"
IDENTIFIER="torbrowser"
nice_name="Tor Browser"

ICON="/usr/share/icons/anon-icon-pack/tbupdate.ico"

## Developer comment on this script:
## I would be very happy if this script would not be required.
## Unfortunately, it is required. It works around a lot bugs:
## - There is no deb/rpm/whatever package with Tor Browser.
##   https://trac.torproject.org/projects/tor/ticket/5236
##   https://trac.torproject.org/projects/tor/ticket/3994
## - There is no way to keep Tor Browser updated.
##   (Thandy doesn't exist yet.)
## - There is no way to add the Documentation page well visible to Tor Browser:
##   https://trac.torproject.org/projects/tor/ticket/6025
##   https://trac.torproject.org/projects/tor/ticket/6053
## - Tor Browsers support for Isolating and Transparent Proxies is very limited:
##   https://trac.torproject.org/projects/tor/ticket/5611
## - tbb-scripts
##   https://github.com/adrelanos/tbb-scripts

tb_error_handler() {
   local exit_code="$?"

   local MSG="<p>###########################################################
<br></br>## $SCRIPTNAME script bug.
<br></br>## No panic. Nothing is broken. Just some rare condition
<br></br>## has been hit. Try again later. There is likely a
<br></br>## solution for this problem. Please see the Whonix News,
<br></br>## Whonix User Help Forum and Whonix Documentation.
<br></br>## <a href=https://www.whonix.org/wiki/Tor_Browser>https://www.whonix.org/wiki/Tor_Browser</a>
<br></br>## Please report this bug!
<br></br>##
<br></br>## BASH_COMMAND: $BASH_COMMAND
<br></br>## exit_code: $exit_code
<br></br>##
<br></br>## output: $output
<br></br>## output_opts: ${output_opts[@]}
<br></br>## progressbaridx: $progressbaridx
<br></br>##
<br></br>## Experts only:
<br></br>## bash -x $SCRIPTNAME
<br></br>###########################################################</p>"

   mkdir --parents ~/".tb"
   echo "$MSG" >> ~/".tb/torbrowser_updater_error.log"

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100" || true
      progressbaridx=""
   fi
   $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
   exit 1
}

trap "tb_error_handler" ERR

DOWNLOAD_FAIL_HELP="<p>Possible reasons:</p>
<p>
<br></br>- The download server is down.
<br></br>- File size exceeded (endless data attack triggered).
<br></br>- Tor Browser Updater (by Whonix developers) has been broken due to upstream changes.
</p>
<p>Recommendations:</p>
<p>
<br></br>- Try again later. If the error persists it probably won't solve itself before the next update.
<br></br>- Check News: <a href=https://www.whonix.org/wiki/Download#Stay_tuned>https://www.whonix.org/wiki/Download#Stay_tuned</a>
<br></br>- Manually update: <a href=https://www.whonix.org/wiki/Manually_Updating_Tor_Browser>https://www.whonix.org/wiki/Manually_Updating_Tor_Browser</a>
</p>"

tb_run_function() {
   case $tb_skip_functions in
   *"${1+"$@"}"*) echo "INFO: Skipping ${1+"$@"}, because tb_skip_functions includes it."
                  return 0
                  ;;
   esac

   true "INFO: Running ${1+"$@"}, because tb_skip_functions does not include it."
   eval ${1+"$@"}
}

root_check() {
   if [ "$(id -u)" != "0" ]; then
      #echo "$SCRIPTNAME running as user."
      true
   else
      echo "Do not run $SCRIPTNAME as root!"
      exit 1
   fi
}

tb_sanity_tests() {
   command -v id >/dev/null
   command -v basename >/dev/null
   command -v touch >/dev/null
   command -v uname >/dev/null
   command -v mkdir >/dev/null
   command -v pidof >/dev/null
   command -v chmod >/dev/null
   command -v cp >/dev/null
   command -v mv >/dev/null
   command -v killall >/dev/null
   command -v rm >/dev/null
   command -v head >/dev/null
   command -v tar >/dev/null
   command -v date >/dev/null
   command -v /usr/lib/msgcollector/msgcollector >/dev/null
   ## tbbversion function
   command -v grep >/dev/null
   ## tbbversion function
   command -v sed >/dev/null
   command -v sort >/dev/null
}

tb_ex_funct() {
   local MSG
   MSG="$SIGNAL_TYPE received. Cleaning up..."

   if [ "$last_pid" = "" ]; then
      true
   else
      kill -1 "$last_pid"
   fi

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100" || true
      progressbaridx=""
   fi

   $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done

   #MSG="Aborted."
   #$output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
   #$output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done

   MSG="$SIGNAL_TYPE received. Exiting."
   $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done
}

tb_signal_sigterm() {
   SIGNAL_TYPE="sigterm"
   tb_ex_funct
   exit 143
}

trap "tb_signal_sigterm" SIGTERM

tb_signal_sigint() {
   SIGNAL_TYPE="sigint"
   tb_ex_funct
   exit 130
}

trap "tb_signal_sigint" SIGINT ## ctrl + c

trap_sigusr2() {
   SIGNAL_TYPE="SIGUSR2"
   tb_ex_funct
   exit 0
}

trap "trap_sigusr2" SIGUSR2 ## msgcollector, zenity cancel button

tb_parse_cmd_options() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while :
   do
       case $1 in
           --ordinary)
               ORDINARY_PROGRESS_BAR="1"
               shift
               ;;
           --update)
               TB_UPDATE="1"
               shift
               ;;
           --noask)
               TB_UPDATE="1"
               TB_FORCE_INSTALL="1"
               shift
               ;;
           --nokilltb)
               TB_UPDATE="1"
               NOKILLTB="1"
               shift
               ;;
           --devbuildpassthrough)
               TB_UPDATE="1"
               TB_FORCE_INSTALL="1"
               DEV_BUILD_PASSTHROUGH="1"
               DEV_PASSTHROUGH="1"
               ORDINARY_PROGRESS_BAR="1"
               shift
               ;;
           ## Keeping --clearnet this for compatibility. Does nothing anymore,
           ## because --clearnet is now the default.
           --clearnet)
               TB_CLEARNET="1"
               shift
               ;;
           --noaskstart)
               noaskstart="true"
               shift
               ;;
           --language)
               TB_LANG="$2"
               shift 2
               ;;
           --no-tor-con-check)
               TB_NO_TOR_CON_CHECK="1"
               shift 1
               ;;
           --alpha)
               TB_VERSIONS_ALPHA="1"
               shift 1
               ;;
           --beta)
               TB_VERSIONS_BETA="1"
               shift 1
               ;;
           --rc)
               TB_VERSIONS_RC="1"
               shift 1
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1"
               echo "See:"
               echo "    man $SCRIPTNAME"
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
   true "$BASH_SOURCE \$@: $@"
}

outputfunc() {
   if [ "$outputfunc_verbose" = "true" ]; then
      echo "Running: bash -x $output_tool --identifier $IDENTIFIER --whoami $who_ami ${1+$@}"
      bash -x $output_tool --identifier "$IDENTIFIER" --whoami "$who_ami" ${1+"$@"}
   else
      $output_tool --identifier "$IDENTIFIER" --whoami "$who_ami" ${1+"$@"}
   fi
   true
}

## Make it visible to curl-prgrs.
export -f outputfunc

tb_config_folder_parser() {
   for i in /etc/torbrowser.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         bash -n "$i"
         source "$i"
      fi
   done
}

tb_preparation() {
   ## Workaround for CI compatibility.
   if [ "$CI" = "true" ]; then
      [ -n "$tb_home_folder" ] || tb_home_folder=/home/user
   else
      [ -n "$tb_home_folder" ] || tb_home_folder=~
   fi

   ## Required for /usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh.
   TEMP_DIR="$tb_home_folder/.tb/temp_dir"
   export TEMP_DIR
   rm --recursive --force "$TEMP_DIR"
   mkdir --parents "$TEMP_DIR"

   ## Fortunately, on linux-image-486 kernel, while "uname --all" returns for example
   ## "Linux host 3.2.0-4-486 #1 Debian 3.2.41-2 i686 GNU/Linux",
   ## "uname --machine" returns "i686" and Tor Browser works fine with linux-image-486 kernel.
   ## (There are no 486 downloads for Tor Browser.)
   ##ARCH="x86_64"
   ##ARCH="i686"
   [ -n "$ARCH" ] || ARCH="$(uname --machine)"
   echo "INFO: $ARCH detected."

   if [ "$ARCH" = "i686" ]; then
      [ -n "$ARCH_NEW" ] || ARCH_NEW="linux32"
   else
      ## NOTE: A simple else is non-ideal, should there be ever more architectures.
      [ -n "$ARCH_NEW" ] || ARCH_NEW="linux64"
   fi
   echo "INFO: arch $ARCH_NEW will be downloaded."

   ## provides tbbversion function
   source /usr/lib/tbbversion_parser

   #echo "INFO: TB_LANG: $TB_LANG"

   ## Check if TB_LANG exists and is not empty.
   if [[ "$TB_LANG" && "${TB_LANG}" ]]; then
      #echo "INFO: Tor Browser language variable is set to "$TB_LANG"."
      true
   else
      #echo "INFO: Tor Browser language variable not found. Setting TB_LANG to the default en-US."
      TB_LANG="en-US"
   fi

   if [ "$display" = "" ]; then
      if [ "$DISPLAY" = "" ]; then
         display=":0"
      else
         display="$DISPLAY"
      fi
   fi

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      output="true"
   else
      output="/usr/lib/msgcollector/msgcollector"
   fi

   local my_tty
   local my_tty_exit_code
   my_tty_exit_code="0"
   my_tty="$(tty)" || { my_tty_exit_code="$?" ; true; };

   if [ ! "$my_tty_exit_code" = "0" ]; then
      my_tty="none"
   fi

   ## Just in case.
   if [ "$my_tty" = "" ]; then
      my_tty="none"
   fi

   who_ami="$(whoami)"

   TITLE="Tor Browser Updater (by Whonix developers)"

   output_tool="/usr/lib/msgcollector/msgcollector"
   output="outputfunc"

   $output --icon "$ICON"
   $output --parenttty "$my_tty"
   $output --whoami "$who_ami"
   $output --titlex "$TITLE"
   $output --titlecli "$TITLE"

   ## Make visible to curl-prgrs.
   export output_tool
   export output
   export IDENTIFIER
   export who_ami

   ret="0"
   command -v curl.anondist-orig >/dev/null || { ret="$?" ; true; };

   if [ "$ret" = "0" ]; then
      ## using the non-uwt-wrapped version, if the uwt wrapper is installed,
      ## which is the case on a default Whonix installation
      CURL=curl.anondist-orig
   else
      ret="0"
      command -v curl >/dev/null || { ret="$?" ; true; };
      if [ "$ret" = "0" ]; then
         ## falling back to real curl, if the uwt wrapper has been uninstalled
         CURL=curl
      else
         local MSG="uwt_tool: Can not find curl. Please report this bug!"
         $output ${output_opts[@]} --messagex --typex "error" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
         EXIT_CODE="1"
         return 0
      fi
   fi

   if [ -x /usr/lib/curl-scripts/curl-prgrs ]; then
      ## Curl progress wrapper.
      CURL_PRGRS="/usr/lib/curl-scripts/curl-prgrs"
   else
      true "/usr/lib/curl-scripts/curl-prgrs not available, skipping."
      true "Setting CURL_PRGRS to $CURL."
      CURL_PRGRS="$CURL"
   fi

   if [ "$ORDINARY_PROGRESS_BAR" = "1" ]; then
      true "--ordinary enabled, setting CURL_PRGRS to $CURL."
      CURL_PRGRS="$CURL"
   fi

   ## Debugging CURL_PRGRS.
   #CURL_PRGRS="bash -x /usr/lib/curl-scripts/curl-prgrs"

   ## Debugging / disabling CURL_PRGRS.
   #CURL_PRGRS="$CURL"

   ## Export CURL variable, so it can be read by $CURL_PRGRS.
   export CURL

   mkdir --parents "$tb_home_folder/.tb"

   ## {{ Download from the torproject.org clearnet by default instead from
   ##    their hidden service.

   [ -n "$TBB_REMOTE_FOLDER" ] || TBB_REMOTE_FOLDER="https://dist.torproject.org/torbrowser"
   [ -n "$CURL_FORCE_SSL" ] || CURL_FORCE_SSL="--tlsv1 --proto =https"

   ## }}

   if [ "$DEV_PASSTHROUGH" = "1" ]; then
      [ -n "$CURL_PROXY" ] || CURL_PROXY=""
   elif [ -d /usr/share/whonix ]; then
      [ -n "$GATEWAY_IP" ] || GATEWAY_IP="10.152.152.10"
      [ -n "$SOCKS_PORT_TBB_DOWNLOAD" ] || SOCKS_PORT_TBB_DOWNLOAD="9115"
      [ -n "$CURL_PROXY" ] || CURL_PROXY="--socks5-hostname socks5h://$GATEWAY_IP:$SOCKS_PORT_TBB_DOWNLOAD/"
   else
      [ -n "$CURL_PROXY" ] || CURL_PROXY=""
   fi

   ## Also used by function tbbversion.
   [ -n "$RecommendedTBBVersions" ] || RecommendedTBBVersions="$tb_home_folder/.tb/RecommendedTBBVersions"
}

tb_connectivity_checks_tor() {
   if [ "$DEV_BUILD_PASSTHROUGH" = "1" ]; then
      return 0
   fi

   if [ "$TB_NO_TOR_CON_CHECK" = "1" ]; then
      return 0
   fi

   if [ -x /usr/lib/anon-shared-helper-scripts/tor_enabled_check ]; then
      echo -n "INFO: Running Tor enabled check... "

      source /usr/lib/anon-shared-helper-scripts/tor_enabled_check
      ## sets: TOR_ENABLED
      check_tor_enabled_do

      if [ "$TOR_ENABLED" = "0" ]; then
         MSG="<p><b>Tor not enabled yet.</b></p>

<p>Please check: <blockquote>Start menu -> System -> Whonix Check
              <br></br>or in Terminal: whonixcheck
              <br></br>or in Terminal with debugging: whonixcheck -v</blockquote></p>

<p>Run whonixcheck on Whonix-Gateway as well.</p>

<p>If whonixcheck reports no problems with internet activity and this still fails, please report a bug!</p>"

         $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
         exit 1
      fi
      echo "Done."
   else
      true "/usr/lib/anon-shared-helper-scripts/tor_enabled_check does not exist, skipping."
   fi

   if [ -x /usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh ]; then
      echo -n "INFO: Running Tor bootstrap check... "
      source /usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh
      ## sets: tor_bootstrap_percent
      tb_run_function check_tor_bootstrap_helper

      if [ ! "$tor_bootstrap_percent" = "100" ]; then
         MSG="<p></b>Tor not fully bootstrapped.</b></p>

<p>Possible reasons:
<br></br>- no internet connectivity</p>

<p>Please check: <blockquote>Start menu -> System -> Whonix Check
              <br></br>or in Terminal: whonixcheck
              <br></br>or in Terminal with debugging: whonixcheck -v</blockquote></p>

<p>Run whonixcheck on Whonix-Gateway as well.</p>

<p>If whonixcheck reports no problems with internet activity and this still fails, please report a bug!</p>"

         $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
         exit 1
      fi
      echo "Done."
   else
      true "/usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh not available, skipping."
   fi

   true "Tor fully bootstrapped."
}

tb_connectivity_checks_curl() {
   if [ "$DEV_BUILD_PASSTHROUGH" = "1" ]; then
      return 0
   fi

   tb_notify_details="Checking connectivity... Will take a moment..."
   echo "INFO: Running connectivity check... "

   ## 1 MB = 1048576 bytes
   ## 2 MB = 2097152 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="2097152"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$tb_home_folder/.tb/tbb_remote_folder"
   curl_download_max_time="180"
   curl_download_target_url="$TBB_REMOTE_FOLDER"
   tb_download_common

   ## Check if curl failed.
   if [ ! "$curl_exit_code" = "0" ]; then
      MSG="<p>$curl_download_target_url could not be reached.</p>

<p>Possible reasons:
<br></br>- $TBB_REMOTE_FOLDER is down
<br></br>- download location changed</p>

<p>Please check: <blockquote>Start menu -> System -> Whonix Check
              <br></br>or in Terminal: whonixcheck
              <br></br>or in Terminal with debugging: whonixcheck -v</blockquote></p>

<p>If whonixcheck reports no problems with internet activity and this keeps failing, please report a bug!</p>

<p>(Debugging information: curl_status_message: $curl_status_message)</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      exit 1
   fi

   echo "INFO: Connectivity check succeeded."
}

tb_update_check() {
   ## do not re-download Tor Browser if a previous build already did
   if [ "$DEV_BUILD_PASSTHROUGH" = "1" ]; then
      if [ -d "$tb_home_folder/tor-browser_$TB_LANG" ]; then
         echo "$SCRIPTNAME: Not downloading Tor Browser again, because $tb_home_folder/tor-browser_$TB_LANG already exists."
         exit 0
      fi
   fi

   [ -n "$TBB_VERSIONS_FILE_LINK" ] || TBB_VERSIONS_FILE_LINK="https://www.torproject.org/projects/torbrowser/RecommendedTBBVersions"

   tb_notify_details="Checking Tor Browser version... Will take a moment..."
   echo "INFO: Find out latest version... Downloading: $TBB_VERSIONS_FILE_LINK... "

   ## 1 MB = 1048576 bytes
   ## 2 MB = 2097152 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="2097152"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$RecommendedTBBVersions"
   curl_download_max_time="180"
   curl_download_target_url="$TBB_VERSIONS_FILE_LINK"
   tb_download_common

   ## Check if curl failed.
   if [ ! "$curl_exit_code" = "0" ]; then
      MSG="<p><b>Failed to download:</b> $curl_download_target_url</p>

<p>$DOWNLOAD_FAIL_HELP</p>

<p>(Debugging information: curl_status_message: $curl_status_message)</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      exit 1
   fi
}

tb_remote_version_parser() {
   test -f "$RecommendedTBBVersions"

   ## needs: $RecommendedTBBVersions
   ## sets: tbb_recommended_versions_list
   ## sets: tbbversions_found
   ## sets: tbb_recommended_versions_error
   tb_run_function tbbversion
}

tb_remote_version_sanity_test() {
   if [ "$tbb_recommended_versions_list" = "UNKNOWN" ]; then
      local MSG="<p>$installed_or_not_text</p>

<p>Could not find out latest Tor Browser version! $tbb_recommended_versions_error</p>

<p>$DOWNLOAD_FAIL_HELP</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      exit 1
   fi
}

tb_local_version_detection() {
   ## Used by tbbversion_installed
   [ -n "$tbb_folder" ] || tbb_folder="$tb_home_folder/tor-browser_$TB_LANG"

   ## sets: tbb_locally_installed_version
   tb_run_function tbbversion_installed

   if [ -d "$tb_home_folder/tor-browser_$TB_LANG" ]; then
      installed_or_not_result="true"
      installed_or_not_text=""
   else
      installed_or_not_result="false"
      installed_or_not_text="Tor Browser is currently not installed.
(Folder $tb_home_folder/tor-browser_$TB_LANG does not exist.)"
   fi
}

tb_confirm_update() {
   if [ "$installed_or_not_result" = "true" ]; then
      local tbb_version
      for tbb_version in $tbb_recommended_versions_list; do
         local dpkg_compare_versions_equals_exit_code="0"
         dpkg --compare-versions "$tbb_version" eq "$tbb_locally_installed_version" || { dpkg_compare_versions_equals_exit_code="$?" ; true; };
         if [ "$dpkg_compare_versions_equals_exit_code" = "0" ]; then
            break
         fi
         local dpkg_compare_versions_greater_than_exit_code="0"
         dpkg --compare-versions "$tbb_version" gt "$tbb_locally_installed_version" || { dpkg_compare_versions_greater_than_exit_code="$?" ; true; };
         if [ "$dpkg_compare_versions_greater_than_exit_code" = "0" ]; then
            break
         fi
         local dpkg_compare_versions_lower_than_exit_code="0"
         dpkg --compare-versions "$tbb_version" lt "$tbb_locally_installed_version" || { dpkg_compare_versions_lower_than_exit_code="$?" ; true; };
         #if [ "$dpkg_compare_versions_lower_than_exit_code" = "0" ]; then
            #break
         #fi
      done
   fi

   local MSG question button
   button="yesno"
   question="Download now?"

   if [ "$installed_or_not_result" = "true" ]; then
      if [ "$dpkg_compare_versions_equals_exit_code" = "0" ]; then
         up_to_date_or_not_text="<p>Looks like Tor Browser is already up to date.</p>"
         re_install_or_install_text="<p>Please close Tor Browser if you want to (re-)install!</p>"
      elif [ "$dpkg_compare_versions_greater_than_exit_code" = "0" ]; then
         up_to_date_or_not_text="<p>Looks like there is an upgrade for Tor Browser.</p>"
         re_install_or_install_text="<p>Please close Tor Browser if you want to (re-)install!</p>"
      elif [ "$dpkg_compare_versions_lower_than_exit_code" = "0" ]; then
         up_to_date_or_not_text="<p><b><u>WARNING: Looks like a downgrade attack!</u></b></p>"
         re_install_or_install_text="<p>Please close Tor Browser if you want to (re-)install!</p>"
      else
         error "<p>Neither of the following were zero.
<br></br>dpkg_compare_versions_equals_exit_code: $dpkg_compare_versions_equals_exit_code
<br></br>dpkg_compare_versions_lower_than_exit_code: $dpkg_compare_versions_lower_than_exit_code
<br></br>dpkg_compare_versions_greater_than_exit_code: $dpkg_compare_versions_greater_than_exit_code</p>"
         exit 1
      fi
      MSG="Download Confirmation
<br></br>----------------------------------------------------------------------
<br></br>Currently installed version: <code><blockquote>$tbb_locally_installed_version</blockquote></code>
Online detected version(s) : <code><blockquote>$tbb_recommended_versions_list</blockquote></code>

$up_to_date_or_not_text

$re_install_or_install_text

<p>If your currently installed version is:
   <blockquote>higher: you are likely target of a downgrade attack, SAY NO NOW!
   <br></br>equal : only proceed, if you want to create a new browser profile.
   <br></br>lower : you should upgrade.</blockquote></p>

<p>YOUR BROWSER WILL BE KILLED.
<br></br>YOUR WHOLE BROWSER PROFILE INCLUDING BOOKMARKS AND PASSWORDS WILL GET REPLACED!</p>

<p>A backup of your old Tor Browser and settings will be created in your home folder.
<br></br>It is a good idea to delete old TBB backups once in a while if you are running low with disk space.</p>"
   else
      MSG="Download Confirmation
<br></br>----------------------------------------------------------------------
<br></br>Currently installed version: <code><blockquote>$tbb_locally_installed_version</blockquote></code>
Online detected version(s) : <code><blockquote>$tbb_recommended_versions_list</blockquote></code>"
   fi

   echo "INFO: Currently installed version: $tbb_locally_installed_version"
   echo "INFO: Online detected version(s) : $tbb_recommended_versions_list"

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      echo "INFO: TB_FORCE_INSTALL = 1"
   else
      local answer
      answer="$(/usr/lib/msgcollector/generic_gui_message "info" "$TITLE" "$MSG" "$question" "$button")"
      if [ ! "$answer" = "16384" ]; then ## Button 'Yes' has not been pressed.
         echo "INFO: Canceled. Exit."
         exit 0
      fi
   fi

   if [ ! "$NOKILLTB" = "1" ]; then
      echo "INFO: Because you are not using --nokilltb, now killing eventually still running instances of Tor Browser..."
      killall firefox || true
   fi
}

tb_download_common() {
   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      progressbaridx="$(cat "/proc/sys/kernel/random/uuid")"
      tb_notify_msg="Download
----------------------------------------------------------------------
$tb_notify_details"
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --parentpid "$$" --typex "info" --progressbartitlex "$TITLE" --message "$tb_notify_msg" --parentpid "$$" --done
      ## $CURL_PRGRS honors the $CURL and the $CURL_PRGRS_EXEC environment
      ## variables. (See above.)
      ## Define what CURL_PRGRS is supposed to eval.
      ## ($percent is a local variable provided by $CURL_PRGRS.)
      export CURL_PRGRS_EXEC="$output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx \"\$percent\""
   fi

   ## Simulating endless data attack.
   #export CURL_PRGRS_MAX_FILE_SIZE_BYTES="1048576"

   curl_exit_code="0"
   $CURL_PRGRS \
      --fail \
      $CURL_PROXY \
      $CURL_FORCE_SSL \
      --max-time "$curl_download_max_time" \
      --output "$CURL_OUT_FILE" \
      "$curl_download_target_url" \
      &

   last_pid="$!"
   wait "$last_pid" || { curl_exit_code="$?" ; true; };
   last_pid=""

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100" || true
      progressbaridx=""
   fi

   if [ -x "/usr/lib/curl-scripts/curl_exit_codes" ]; then
      curl_status_message="$(/usr/lib/curl-scripts/curl_exit_codes "$curl_exit_code")" || true
   else
      curl_status_message="$curl_exit_code"
   fi

   ## Check if curl failed.
   if [ ! "$curl_exit_code" = "0" ]; then
      if [ ! "$tb_download_attempt_last_try" = "true" ]; then
         MSG="<p><b>Failed to download:</b> $curl_download_target_url
<br></br>There are other recommended versions. Will try to download the next recommended version...</p>

<p>(Debugging information: curl_status_message: $curl_status_message)</p>"
         ## No popup message in X. Would be too confusing.
         #$output ${output_opts[@]} --messagex --typex "info" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done
      else
         MSG="<p>Failed to download: $curl_download_target_url</p>

<p>$DOWNLOAD_FAIL_HELP</p>"
         $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
         exit 1
      fi
   fi

   echo "INFO: Done, downloaded $curl_download_target_url."
}

tb_download_files() {
   [ -n "$TBB_EXTRA_FOLDER" ] || TBB_EXTRA_FOLDER="${tbb_version_folder}"

   ### signature ###

   [ -n "$TBB_SIG_FILENAME" ] || TBB_SIG_FILENAME="sha256sums.txt.asc"
   [ -n "$TBB_SIG_LINK" ] || TBB_SIG_LINK="${TBB_REMOTE_FOLDER}/${TBB_EXTRA_FOLDER}/${TBB_SIG_FILENAME}"

   tb_notify_details="Downloading Tor Browser signature... Will take a moment..."
   echo "INFO: Downloading GPG signature... Will take a moment..."
   echo "\
INFO: Downloading:
      $TBB_SIG_LINK ... Will take a moment..."

   ## 1 MB = 1048576 bytes
   ## 2 MB = 2097152 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="2097152"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$tb_home_folder/.tb/$TBB_SIG_FILENAME"
   curl_download_max_time="180"
   curl_download_target_url="$TBB_SIG_LINK"
   tb_download_common

   if [ ! "$curl_exit_code" = "0" ]; then
      ## Unset those, so during next invocation by tb_download_loop these can
      ## be set again.
      unset TBB_EXTRA_FOLDER
      unset TBB_SIG_FILENAME
      unset TBB_SIG_LINK
      ## return 0, so the loop might try the next $tbb_version.
      return 0
   fi

   ### hash file ###

   [ -n "$TBB_HASH_FILENAME" ] || TBB_HASH_FILENAME="sha256sums.txt"
   [ -n "$TBB_HASH_LINK" ] || TBB_HASH_LINK="${TBB_REMOTE_FOLDER}/${TBB_EXTRA_FOLDER}/${TBB_HASH_FILENAME}"

   tb_notify_details="Downloading Tor Browser sha256sums file... Will take a moment..."
   echo "INFO: Downloading sha256sums file... Will take a moment..."
   echo "\
INFO: Downloading:
      $TBB_HASH_LINK ... Will take a moment..."

   ## 1 MB = 1048576 bytes
   ## 2 MB = 2097152 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="2097152"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$tb_home_folder/.tb/$TBB_HASH_FILENAME"
   curl_download_max_time="180"
   curl_download_target_url="$TBB_HASH_LINK"
   tb_download_common

   if [ ! "$curl_exit_code" = "0" ]; then
      ## Unset those, so during next invocation by tb_download_loop these can
      ## be set again.
      unset TBB_EXTRA_FOLDER
      unset TBB_HASH_FILENAME
      unset TBB_HASH_LINK
      ## return 0, so the loop might try the next $tbb_version.
      return 0
   fi

   ### archive file ###

   [ -n "$TBB_PACKAGE_FILENAME" ] || TBB_PACKAGE_FILENAME="tor-browser-${ARCH_NEW}-${tbb_version}_${TB_LANG}.tar.xz"
   [ -n "$TBB_PACKAGE_LINK" ] || TBB_PACKAGE_LINK="$TBB_REMOTE_FOLDER/${TBB_EXTRA_FOLDER}/$TBB_PACKAGE_FILENAME"

   tb_notify_details="Downloading Tor Browser... Will take a while..."
   echo "INFO: Downloading Tor Browser Bundle: $tbb_version"
   echo "\
INFO: Downloading:
      $TBB_PACKAGE_LINK ... Will take a while..."

   ## 1 MB = 1048576 bytes
   ## 100 MB = 104857600 bytes
   ## Export CURL_PRGRS_MAX_FILE_SIZE_BYTES, so $CURL_PRGRS can read it.
   export CURL_PRGRS_MAX_FILE_SIZE_BYTES="104857600"
   ## Export CURL_OUT_FILE, so $CURL_PRGRS can read it.
   export CURL_OUT_FILE="$tb_home_folder/.tb/$TBB_PACKAGE_FILENAME"
   curl_download_max_time="3600"
   curl_download_target_url="$TBB_PACKAGE_LINK"
   tb_download_common

   if [ ! "$curl_exit_code" = "0" ]; then
      ## Unset those, so during next invocation by tb_download_loop these can
      ## be set again.
      unset TBB_EXTRA_FOLDER
      unset TBB_PACKAGE_FILENAME
      unset TBB_PACKAGE_LINK
      ## return 0, so the loop might try the next $tbb_version.
      return 0
   fi

   tb_download_attempt_success="true"
}

tb_gpg_verify() {
   echo "INFO:
## Verifying GPG signature.
## Not using the user's GPG keyring also ensures, that the key can be only
## signed by the GPG keys we added. Signatures from random people from the
## user's keyring will be ignored."

   gpg_bash_lib_input_verify_timeout_after="60"
   gpg_bash_lib_input_verify_kill_after="10"
   gpg_bash_lib_input_key_import_dir="/usr/share/torbrowser-updater-keys.d"
   gpg_bash_lib_input_temp_folder="$tb_home_folder/.tb/gpgtmpdir"
   gpg_bash_lib_input_data_file="$tb_home_folder/.tb/$TBB_HASH_FILENAME"
   gpg_bash_lib_input_sig_file="$tb_home_folder/.tb/$TBB_SIG_FILENAME"
   gpg_bash_lib_input_file_name_enforce="true"
   gpg_bash_lib_input_cleanup="false"
   gpg_bash_lib_input_error_handler_extra='tb_error_handler "$gpg_bash_lib_output_error_handler_message"'
   ## One month has 2592000 seconds.
   ## (60 [seconds] * 60 [minutes] * 24 [hours] * 30 [days])
   ## Setting this to 3 months. (777600 seconds)
   ## (2592000 * 3 [months])
   [ -n "$gpg_bash_lib_input_maximum_age_in_seconds" ] || gpg_bash_lib_input_maximum_age_in_seconds="2592000"

   source "/usr/lib/gpg-bash-lib/source_all"

   trap "gpg_bash_lib_function_error_handler" ERR
   gpg_bash_lib_function_main_verify
   trap "tb_error_handler" ERR

   echo "INFO: gpg_bash_lib_output_gpg_verify_output:
$gpg_bash_lib_output_gpg_verify_output"

   if [ ! "$gpg_bash_lib_output_validsig_status" = "true" ]; then
      local MSG="<p><b>GPG download signature could NOT be verified.</b>
<br></br>Tor Browser update failed! Try again later.</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      exit 1
   fi
}

tb_hash_verify() {
   echo "INFO: Checking hash..."

   rm --force "$tb_home_folder/.tb/sha256_output"

   local first second
   local sha256sum_output sha256sum

   local timeout_after kill_after file_name
   timeout_after="180"
   kill_after="30"

   ## for relative paths
   cd "$tb_home_folder/.tb"

   ## Debugging.
   #timeout_after="0.001"
   #kill_after="0.001"

   tb_sha_exit_code="0"

   timeout --kill-after="$kill_after" "$timeout_after" \
      sha256sum "$TBB_PACKAGE_FILENAME" \
         > "$tb_home_folder/.tb/sha256_output" \
         2>&1 \
         \ &

   lastpid="$!"
   wait "$lastpid" || { tb_sha_exit_code="$?" ; true; };

   sha256sum_output="$(cat "$tb_home_folder/.tb/sha256_output")" || true

   if grep -q "$sha256sum_output" "$tb_home_folder/.tb/$TBB_HASH_FILENAME" ; then
      echo "INFO: Hash check ok."
      return 0
   fi

   echo "ERROR: Hash check failed! Exiting." >&2
   local MSG="<p><b>Hash could NOT be verified.</b>
<br></br>Tor Browser update failed! Try again later.</p>"
   $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
   exit 1
}

tb_confirm_install() {
   local MSG question button answer type clock_hint
   local signature_freshness_msg signature_creation_msg
   local last_used_gpg_bash_lib_output_signed_on_date
   local last_used_gpg_bash_lib_output_signed_on_unixtime

   if [ -f "$tb_home_folder/.tb/last_used_gpg_bash_lib_output_signed_on_date" ]; then
      last_used_gpg_bash_lib_output_signed_on_date="$(cat "$tb_home_folder/.tb/last_used_gpg_bash_lib_output_signed_on_date")" || true
   fi
   if [ "$last_used_gpg_bash_lib_output_signed_on_date" = "" ]; then
      last_used_gpg_bash_lib_output_signed_on_date="Unknown. Probably never downloaded a signature before."
   fi
   if [ -f "$tb_home_folder/.tb/last_used_gpg_bash_lib_output_signed_on_unixtime" ]; then
      last_used_gpg_bash_lib_output_signed_on_unixtime="$(cat "$tb_home_folder/.tb/last_used_gpg_bash_lib_output_signed_on_unixtime")" || true
   fi
   if [ "$last_used_gpg_bash_lib_output_signed_on_unixtime" = "" ]; then
      last_used_gpg_bash_lib_output_signed_on_unixtime="unknown"
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/054
   if [[ "$last_used_gpg_bash_lib_output_signed_on_unixtime" != *[!0-9]* ]]; then
      true "'$last_used_gpg_bash_lib_output_signed_on_unixtime' is strictly numeric."
      if [ "$last_used_gpg_bash_lib_output_signed_on_unixtime" -lt "$gpg_bash_lib_output_signed_on_unixtime" ]; then
         signature_freshness_msg="Downloaded signature is newer than last known signature. Looks alright."
         type="info"
      elif [ "$last_used_gpg_bash_lib_output_signed_on_unixtime" -gt "$gpg_bash_lib_output_signed_on_unixtime" ]; then
         signature_freshness_msg="Downloaded signature is older than last known signature. You are likely target of a downgrade attack, SAY NO NOW!"
         type="warning"
      elif [ "$last_used_gpg_bash_lib_output_signed_on_unixtime" = "$gpg_bash_lib_output_signed_on_unixtime" ]; then
         signature_freshness_msg="Downloaded signature has same creation date as last known signature. \
Unless you are re-installing the same version, you could be target of an indefinite freeze attack."
         type="warning"
      else
         error "last_used_gpg_bash_lib_output_signed_on_unixtime $last_used_gpg_bash_lib_output_signed_on_unixtime \
neither -lt, -gt nor equals gpg_bash_lib_output_signed_on_unixtime $gpg_bash_lib_output_signed_on_unixtime"
         type="error"
      fi
   else
      signature_freshness_msg="We have not previously accepted a signature yet. Therefore assisted check for downgrade \
or indefinite freeze attacks skipped. Please check the Current Signature Creation Date looks sane."
      type="info"
   fi

   if [ -d /usr/share/whonix ]; then
      clock_hint="In that case, please run Timesync: <blockquote>Start menu -> Applications -> System -> Timesync</blockquote>
                     or in Terminal: <code><blockquote>timesync</blockquote></code>"
   fi

   case "$gpg_bash_lib_output_freshness_detail" in
      "lenient")
         signature_creation_msg="<b>Your clock might be slow.</b> $clock_hint
According to your system clock, signature was created $gpg_bash_lib_output_signed_on_unixtime_minus_current_unixtime_pretty before current time.
You can probably ignore this, because it still is within range. (Okay up to $gpg_bash_lib_output_maximum_age_pretty_output before.)"
         ;;
      "slow")
         signature_creation_msg="<b>Your clock might be slow.</b> $clock_hint
According to your system clock, signature was created $gpg_bash_lib_output_signed_on_unixtime_minus_current_unixtime_pretty before current time."
         ;;
      "outdated")
         signature_creation_msg="Signature looks quite old already.
<br></br>Either,
<br></br>- your clock might be fast (at least $gpg_bash_lib_output_in_future_pretty_output fast). $clock_hint
<br></br>- there is really no newer signature yet. Signature is really older than $gpg_bash_lib_output_maximum_age_pretty_output. already. (Older than $gpg_bash_lib_output_in_future_pretty_output already.)
<br></br>- this is a $SCRIPTNAME bug
<br></br>- this is an attack"
         ;;
      "current")
         signature_creation_msg="According to your system clock, signatures was created $gpg_bash_lib_output_current_unixtime_minus_signed_on_unixtime_pretty ago."
         ;;
      *)
         error "gpg_bash_lib_output_freshness_detail is neither lenient, nor slow, nor outdated, nor current, it is: $gpg_bash_lib_output_freshness_detail"
         return 0
         ;;
   esac

   MSG="Installation / Signature Confirmation
<br></br>----------------------------------------------------------------------
<br></br>Currently installed version: <code><blockquote>$tbb_locally_installed_version</blockquote></code>
Downloaded version         : <code><blockquote>$tbb_version</blockquote></code>
<br></br>
<br></br>$signature_freshness_msg
<br></br>
<br></br>Previous Signature Creation Date: <code>$last_used_gpg_bash_lib_output_signed_on_date</code>
<br></br>Last Signature Creation Date    : <code>$gpg_bash_lib_output_signed_on_date</code>
<br></br>
<br></br>$signature_creation_msg"

   $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done

   button="yesno"
   question="Install now?"

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      echo "INFO: TB_FORCE_INSTALL = 1"
   else
      answer="$(/usr/lib/msgcollector/generic_gui_message "$type" "$TITLE" "$MSG" "$question" "$button")"
      if [ ! "$answer" = "16384" ]; then ## Button 'Yes' has not been pressed.
         echo "INFO: Canceled. Exit."
         exit 0
      fi
   fi

   echo "$gpg_bash_lib_output_signed_on_date" > "$tb_home_folder/.tb/last_used_gpg_bash_lib_output_signed_on_date"
   echo "$gpg_bash_lib_output_signed_on_unixtime"  > "$tb_home_folder/.tb/last_used_gpg_bash_lib_output_signed_on_unixtime"
}

tb_extract() {
   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      progressbaridx="$(cat "/proc/sys/kernel/random/uuid")"
      tb_notify_msg="Extraction
----------------------------------------------------------------------
Extracting $nice_name... This could take a moment. Progress bar will not move."
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --parentpid "$$" --typex "info" --progressbartitlex "$TITLE" --message "$tb_notify_msg" --parentpid "$$" --done
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "25"
   fi

   local timeout_after kill_after file_name
   timeout_after="180"
   kill_after="30"
   file_name="$tb_home_folder/.tb/$TBB_PACKAGE_FILENAME"

   ## Debugging.
   #timeout_after="0.001"
   #kill_after="0.001"

   tb_tar_exit_code="0"

   timeout --kill-after="$kill_after" "$timeout_after" \
      tar \
         xfv \
         "$file_name" \
         -C "$tb_home_folder/.tb/" \
         &

   lastpid="$!"
   wait "$lastpid" || { tb_tar_exit_code="$?" ; true; };

   ## `timeout` returns:
   ## - 124 if sigterm was sufficient
   ## - 137 if needed to use kill.

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100" || true
      progressbaridx=""
   fi

   if [ ! "$tb_tar_exit_code" = "0" ]; then
      local MSG="<p><b>Could not extract $file_name!</b> (tar exit code: ${tb_tar_exit_code})
<br></br>Please report this bug!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG" --done
      exit 1
   fi
}

tb_patch_version_number_own() {
   ## In past with TBB 3.x the folder ~/"tor-browser_${TB_LANG}/Docs" already
   ## existed. Was later changed. Since TBB's folder structure often changes we
   ## just keep using the folder, create it ourselves and therefore make sure
   ## the script will not break in case of further changes by upstream.
   mkdir --parents "$tb_home_folder/.tb/tor-browser_$TB_LANG/Docs"

   ## Tor Browser changelog has been forgotten to update.
   ## https://sourceforge.net/p/whonix/discussion/general/thread/6122990d/
   ## Later the path was changed from
   ## TBB 3.x ~/"tor-browser_${TB_LANG}/Docs/sources/versions" to
   ## TBB 4.X ~/"tor-browser_${TB_LANG}/Browser/TorBrowser/Docs/sources/versions".
   ## To play it safe and having a chance of finding out the installed version,
   ## we create a file ourselves to remember it.
   echo "INFO: Creating version file tor-browser_$TB_LANG/Docs/version."
   echo "$tbb_version" > "$tb_home_folder/.tb/tor-browser_$TB_LANG/Docs/version"
}

tb_patch_download_folder_create() {
   mkdir --parents "$tb_home_folder/.tb/tor-browser_$TB_LANG/Browser/Downloads"
}

tb_patch_internal_updater_disable_maybe() {
   local source_file target_file
   source_file="/usr/share/tb-updater/tb_internal_updater_disable.js"
   target_file="$tb_home_folder/.tb/tor-browser_$TB_LANG/Browser/TorBrowser/Data/Browser/profile.default/preferences/tb_internal_updater_disable.js"

   if [ -f "$source_file" ]; then
      echo "INFO: Deactivating Tor Browser’s Internal Updater at least as long \
it does not support verification. See also:
- https://www.whonix.org/blog/tor-browser-updater-warning
- https://www.whonix.org/forum/index.php/topic,807
Feel free to delete file
$target_file
if you want to disable this behavior.
To permanently disable this $SCRIPTNAME feature, create a file
/etc/torbrowser.d/50_user
and add:
tb_skip_functions+=\" $FUNCNAME \""
      cp "$source_file" "$target_file"
   else
      echo "INFO: Not Deactivating Tor Browser’s Internal Updater because file
$source_file
does not exist."
   fi
}

tb_patch() {
   tb_run_function tb_patch_version_number_own
   tb_run_function tb_patch_download_folder_create
   tb_run_function tb_patch_internal_updater_disable_maybe
}

tb_install() {
   if [ -d "$tb_home_folder/tor-browser_$TB_LANG" ]; then
      echo "INFO: Moving old folder $tb_home_folder/tor-browser_$TB_LANG..."
      mv "$tb_home_folder/tor-browser_$TB_LANG" "$tb_home_folder/tor-browser_$TB_LANG.old.$(date '+%F-%H:%M:%S')"
   fi

   echo "INFO: Moving temporary folder $tb_home_folder/.tb/tor-browser_$TB_LANG to $tb_home_folder/tor-browser_$TB_LANG."
   mv "$tb_home_folder/.tb/tor-browser_$TB_LANG" "$tb_home_folder/tor-browser_$TB_LANG"
}

tb_end() {
   local TEMP
   TEMP="$tb_home_folder/tor-browser_$TB_LANG/"

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      echo "INFO: Finished installing Tor Browser. Can be found in $TEMP."
      echo "INFO: Not starting Tor Browser, because variable TB_FORCE_INSTALL is set to 1."
      return 0
   fi

   local command_v_torbrowser_exit_code="0"
   command -v torbrowser || { command_v_torbrowser_exit_code="$?" ; true; };

   if [ "$command_v_torbrowser_exit_code" = "0" ]; then
      if [ "$noaskstart" = "true" ]; then
         echo "INFO: noaskstart is set to true. Skipping question if Tor Browser should be started."
      else
         MSG="<p>Finished installing Tor Browser. Can be found in $TEMP.</p>

<p>Please donate!
<br></br><a href=https://www.whonix.org/wiki/Donate>https://www.whonix.org/wiki/Donate</a></p>"
         local question="Start Tor Browser?"
         local button="yesno"
         local answer
         answer="$(/usr/lib/msgcollector/generic_gui_message "info" "$TITLE" "$MSG" "$question" "$button")"
         if [ ! "$answer" = "16384" ]; then ## Button 'Yes' has not been pressed.
            echo "INFO: Canceled starting Tor Browser, ok."
         else
            torbrowser
         fi
      fi
   else
      echo "INFO: torbrowser binary not found in path. tb-starter is probably not installed. \
Skipping question to start Tor Browser."
   fi
}

tb_sort_remote_versions() {
   if [ "$tbb_recommended_versions_list" = "" ]; then
      error "tbb_recommended_versions_list was empty before sorting."
   fi

   ## Example tbb_recommended_versions_list:
   ## 2.3.25-16 3.8 2.6 3.7 3.1 3.1 3.4 2.3.25-15 3.5

   rm --force "$TEMP_DIR/tbb_recommended_versions_list"
   touch "$TEMP_DIR/tbb_recommended_versions_list"
   test -f "$TEMP_DIR/tbb_recommended_versions_list"
   local tbb_version
   for tbb_version in $tbb_recommended_versions_list; do
      echo "$tbb_version" >> "$TEMP_DIR/tbb_recommended_versions_list"
   done

   tbb_recommended_versions_list="$(sort --unique --version-sort --reverse "$TEMP_DIR/tbb_recommended_versions_list")"
   if [ "$tbb_recommended_versions_list" = "" ]; then
      error "tbb_recommended_versions_list is empty after sorting."
   fi

   ## Example tbb_recommended_versions_list:
   ## 3.8
   ## 3.7
   ## 3.5
   ## 3.4
   ## 3.1
   ## #2.6
   ## 2.3.25-16
   ## 2.3.25-15
}

tb_download_loop() {
   ## In past there where situations where RecommendedTBBVersions advertised
   ## multiple versions, but not all were indeed downloadable. Therefore we
   ## start with the highest available advertised version, try downloading, try
   ## downloading next one and so forth.

   for tbb_version in $tbb_recommended_versions_list; do
      ## Starting with the highest available $tbb_version thanks to tb_sort_remote_versions.

      ## For testing.
      #tbb_version="3.0-rc-1"
      #tbb_version_folder="3.0rc1"

      tbb_version_folder="$tbb_version"

      [ -n "$tb_download_attempt_number" ] || tb_download_attempt_number="0"
      [ -n "$tb_download_attempt_max" ] || tb_download_attempt_max="3"

      tb_download_attempt_number="$(( $tb_download_attempt_number + 1 ))"
      echo "INFO: Download attempt number $tb_download_attempt_number of max tb_download_attempt_max $tb_download_attempt_max."
      if [ "$tb_download_attempt_number" -ge "$tbbversions_found" ]; then
         tb_download_attempt_last_try="true"
      fi
      if [ "$tb_download_attempt_number" -ge "$tb_download_attempt_max" ]; then
         tb_download_attempt_last_try="true"
      fi

      if [ "$tb_download_attempt_success" = "true" ]; then
         ## Download already succeeded.
         break
      fi
      tb_run_function tb_download_files
      if [ "$tb_download_attempt_success" = "true" ]; then
         ## Download already succeeded.
         break
      fi
   done
}

main_function() {
   tb_run_function root_check
   tb_run_function tb_sanity_tests
   tb_run_function tb_preparation
   tb_run_function tb_config_folder_parser
   tb_run_function tb_parse_cmd_options ${1+"$@"}
   tb_run_function tb_local_version_detection
   tb_run_function tb_connectivity_checks_tor
   tb_run_function tb_connectivity_checks_curl
   tb_run_function tb_update_check
   tb_run_function tb_remote_version_parser
   tb_run_function tb_remote_version_sanity_test

   ## For testing:
   #tbb_recommended_versions_list="2.3.25-16 3.8 2.6 3.7 3.1 3.1 3.4 2.3.25-15 3.5"
   #tbb_recommended_versions_list="2.3.25-16 2.3.25-15 $tbb_recommended_versions_list 10.0 15.0 20.0 25.0 30.0"

   tb_run_function tb_sort_remote_versions
   tb_run_function tb_confirm_update
   tb_run_function tb_download_loop
   tb_run_function tb_gpg_verify
   tb_run_function tb_hash_verify
   tb_run_function tb_confirm_install
   tb_run_function tb_extract
   tb_run_function tb_patch
   tb_run_function tb_install
   tb_run_function tb_end
}

tb_run_function main_function ${1+"$@"}
